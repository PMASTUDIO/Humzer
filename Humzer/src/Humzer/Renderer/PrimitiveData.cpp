#include "humpch.h"
#include "PrimitiveData.h"

namespace Humzer {


	void Primitive::getTriData(std::vector<float>& vertices, std::vector<uint32_t>& indices)
	{
		std::vector<float> _vertices = {
			0.0f, -1.0f, 0.0f,     0.0f, 0.0f, 1.0,			1.0f, 0.0f, 0.0, 1.0,	 0.0, 1.0,
			1.0f, 1.0f, 0.0f,      0.0f, 0.0f, 1.0,			0.0f, 1.0f, 0.0, 1.0,	 0.0, 0.0,
			-1.0f, 1.0f, 0.0f,     0.0f, 0.0f, 1.0,			0.0f, 0.0f, 1.0, 1.0,	 1.0, 0.0,
		};

		std::vector<uint32_t> _indices = {
			0, 1, 2,
		};

		vertices.clear(); indices.clear();

		vertices = _vertices;
		indices = _indices;
	}

	void Primitive::getQuadData(std::vector<float>& vertices, std::vector<uint32_t>& indices)
	{
		std::vector<float> _vertices = {
			  -1.0f, -1.0f, 0.0f ,	 0.0f, 0.0f, 1.0 ,	 1.0f, 0.0f, 0.0, 1.0,	 0.0, 1.0  ,
			  -1.0f, 1.0f, 0.0f ,	 0.0f, 0.0f, 1.0 ,	 0.0f, 1.0f, 0.0, 1.0,	 0.0, 0.0  ,
			  1.0f, 1.0f, 0.0f ,	 0.0f, 0.0f, 1.0 ,	 0.0f, 0.0f, 1.0, 1.0,	 1.0, 0.0  ,
			  1.0f, -1.0f, 0.0f ,	 0.0f, 0.0f, 1.0 ,	 1.0f, 0.0f, 1.0, 1.0,	 1.0, 1.0
		};

		std::vector<uint32_t> _indices = {
			0, 1, 2,
			0, 2, 3
		};

		vertices.clear(); indices.clear();

		vertices = _vertices;
		indices = _indices;
	}

	void Primitive::getCubeData(std::vector<float>& vertices, std::vector<uint32_t>& indices)
	{
		std::vector<float> _vertices = {
			//front
			    -1.0f, -1.0f, 1.0f ,	0.0f, 0.0f, 1.0 ,		1.0f, 0.0f, 0.0, 1.0,		0.0, 1.0  ,
			    -1.0f, 1.0f, 1.0f ,		0.0f, 0.0f, 1.0 ,		0.0f, 1.0f, 0.0, 1.0,		0.0, 0.0  ,
			    1.0f, 1.0f, 1.0f ,		0.0f, 0.0f, 1.0 ,		0.0f, 0.0f, 1.0, 1.0,		1.0, 0.0  ,
			    1.0f, -1.0f, 1.0f ,		0.0f, 0.0f, 1.0 ,		1.0f, 0.0f, 1.0, 1.0,		1.0, 1.0  ,
																				 
			  // back 															 
			    1.0, -1.0, -1.0 ,		0.0f, 0.0f, -1.0 ,		1.0f, 0.0f, 1.0, 1.0,		0.0, 1.0  , //4
			    1.0f, 1.0, -1.0 ,		0.0f, 0.0f, -1.0 ,		0.0f, 1.0f, 1.0, 1.0,		0.0, 0.0  , //5
			    -1.0, 1.0, -1.0 ,		0.0f, 0.0f, -1.0 ,		0.0f, 1.0f, 1.0, 1.0,		1.0, 0.0  , //6
			    -1.0, -1.0, -1.0 ,		0.0f, 0.0f, -1.0 ,		1.0f, 0.0f, 1.0, 1.0,		1.0, 1.0  , //7
																				
			    -1.0, -1.0, -1.0 ,		-1.0f, 0.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		0.0, 1.0  , //8
			    -1.0f, 1.0, -1.0 ,		 -1.0f, 0.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		0.0, 0.0  , //9
			    -1.0, 1.0, 1.0 ,		-1.0f, 0.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		1.0, 0.0  ,   //10
			    -1.0, -1.0, 1.0 ,		-1.0f, 0.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		1.0, 1.0  , //11
																				 
			  //right															 
				1.0, -1.0, 1.0 ,		1.0f, 0.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		0.0, 1.0  , // 12
				1.0f, 1.0, 1.0 ,		1.0f, 0.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		0.0, 0.0  , //13
				1.0, 1.0, -1.0 ,		1.0f, 0.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		1.0, 0.0  , //14
			    1.0, -1.0, -1.0 ,		 1.0f, 0.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		1.0, 1.0  , //15
																				 
			  //top																
				-1.0f, 1.0f, 1.0f ,		0.0f, 1.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		0.0, 1.0  , //16
				-1.0f, 1.0f, -1.0f ,	0.0f, 1.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		0.0, 0.0  , //17
				1.0f, 1.0f, -1.0f ,		0.0f, 1.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		1.0, 0.0  , //18
				1.0f, 1.0f, 1.0f ,		0.0f, 1.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		1.0, 1.0  , //19
																				 
			  //bottom 															 
			    -1.0f, -1.0, -1.0 ,		0.0f, -1.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		0.0, 1.0  , //20
			    -1.0, -1.0, 1.0 ,		0.0f, -1.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		0.0, 0.0  , //21
			    1.0, -1.0, 1.0 ,		0.0f, -1.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		1.0, 0.0  ,  //22
			    1.0, -1.0, -1.0 ,		0.0f, -1.0f, 0.0 ,		0.0f, 0.0f, 1.0, 1.0,		1.0, 1.0  , //23
		};

		std::vector<uint32_t> _indices = {
			0, 1, 2,
			2, 3, 0,

			4, 5, 6,
			4, 6, 7,

			8, 9, 10,
			8, 10, 11,

			12, 13, 14,
			12, 14, 15,

			16, 17, 18,
			16, 18, 19,

			20, 21, 22,
			20, 22, 23
		};

		vertices.clear(); indices.clear();

		vertices = _vertices;
		indices = _indices;
	}

}
